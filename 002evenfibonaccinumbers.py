#https://projecteuler.net/problem=2 Even Fibonacci numbers
#Problem 2
#Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

def fibonacci(n):
	if n == 1:
		return 1
	elif n == 2:
		return 1
	elif n > 2:
		return fibonacci(n-1) + fibonacci(n-2)
print(fibonacci(7))

#Memorization is store the values for recent function calls so future calls don't have to repeat the work.  There are several ways:  implement explicitly and use built-in python tool "from functools import lru_cache".

#create a dictionary fibonacci_cache which stores recent function calls.
project2evenfibonaccilist = []
fibonacci_cache = {}
#print(fibonacci_cache)
def fibonaccicache(n):
	#if we have cached the value, then return it
	if n in fibonacci_cache:
		return fibonacci_cache[n]
	# Compute the Nth term
	if n == 1:
		value = 1
	elif n == 2:
		value = 2
	elif n > 2:
		value = fibonaccicache(n-1) + fibonaccicache(n-2)
	#Cache the value in fibonacci_cache dictionary and return it
	fibonacci_cache[n] = value
	return value
#for n in range(1,200):
for n in range(1,200):
	#print(n, ":", fibonaccicache(n), "going faster use memorization.")
	if fibonaccicache(n) % 2 == 0:
		project2evenfibonaccilist.append(fibonaccicache(n))
	if fibonaccicache(n) > 4000000:
		break
	#print(fibonacci_cache)
print("\n")
print(project2evenfibonaccilist)
print(sum(project2evenfibonaccilist)) #print 4613732

#use while loop
evenvaluesum = int(input("Enter the maximum Fibonacci sequence value to find the sum of their even-value terms "))
project2evenfibonaccilist = []
fibonacci_cache = {}
def fibonaccicache(n):
	#if we have cached the value, then return it
	if n in fibonacci_cache:
		return fibonacci_cache[n]
	# Compute the Nth term
	if n == 1:
		value = 1
	elif n == 2:
		value = 2
	elif n > 2:
		value = fibonaccicache(n-1) + fibonaccicache(n-2)
	#Cache the value in fibonacci_cache dictionary and return it
	fibonacci_cache[n] = value
	return value
n = 1
while fibonaccicache(n) < evenvaluesum:	
	if fibonaccicache(n) % 2 == 0:
		project2evenfibonaccilist.append(fibonaccicache(n))
	n = n + 1
print("\n")
print(project2evenfibonaccilist)
print(sum(project2evenfibonaccilist)) #print 4613732