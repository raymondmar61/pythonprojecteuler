#https://projecteuler.net/problem=39 Integer right triangles
#https://projecteuler.net/thread=39
#Take the number 192 and multiply it by each of 1, 2, and 3:
#If p is the perimeter of a right angle triangle with integral length sides, {a,b,c}, there are exactly three solutions for p = 120.
#{20,48,52}, {24,45,51}, {30,40,50}
#For which value of p <= 1000, is the number of solutions maximised?
from collections import Counter
from math import sqrt
import time
startime = time.time()
plist = []
noduplicateplist = []
noduplicateother = []
min = 1
max = 1000
for a in range(min, max+1):
	for b in range(min+1, max+1):
		c=a+b
		#want p<=1000, skip a+b+c>1000
		if a+b+c>max+1:
			continue
		#calculate c for a^2+b^2=c^2
		c=sqrt((a**2)+(b**2))
		#convert c to string
		c=str(c)
		#find the index number for the decimal point in string c
		stopper=len(c)-2
		#skip duplicate numbers p; e.g. 3^2+4^2=5^2, no need for 4^2+3^2=5^2
		if (str(b)+","+str(a)+","+str(c)[0:stopper]) in noduplicateplist:
			continue
		#skip all other duplicate numbers
		if (str(b)+str(a)+str(c)) in noduplicateother:
			continue
		#if string c is an integer such as 3^2+4^2=5^2 or c=25.0, then add a=3, b=4, c=5 or 3+4+5=12 to plist
		if c[-1] == "0":
			plist.append(a+b+int(c[0:stopper]))
			#add duplicate numbers p; e.g. 3^2+4^2=5^2 to avoid recalculating 4^2+3^2=5^2
			noduplicateplist.append(str(a)+","+str(b)+","+str(c)[0:stopper])
		else:
			#add all other duplicate numbers
			noduplicateother.append(str(a)+str(b)+str(c))
print(plist) #print [12, 30, 24, 56, 40, 36, 90, 60, 132, 48, 84, 182, 112, 60, 90, 240, 80, 144, 306, 72, 180, 380, 70, 120, 220, 84, 168, 462, 264, 552, 96, 120, 168, 312, 150, 650, 364, 108, 270, 756, 126, 224, 420, 870, 120, 180, 480, 160, 288, 544, 132, 154, 396, 612, 210, 280, 144, 198, 252, 360, 684, 760, 156, 208, 546, 140, 200, 240, 440, 840, 168, 336, 924, 286, 528, 180, 270, 450, 720, 176, 192, 240, 336, 432, 624, 392, 300, 204, 340, 918, 390, 728, 216, 540, 330, 660, 252, 280, 448, 840, 228, 418, 210, 240, 260, 360, 420, 510, 660, 252, 504, 630, 320, 576, 234, 390, 910, 264, 308, 792, 646, 276, 598, 420, 560, 288, 360, 396, 504, 720, 300, 450, 700, 798, 616, 924, 312, 416, 280, 400, 480, 720, 880, 324, 810, 336, 378, 476, 588, 672, 374, 510, 348, 330, 440, 572, 360, 540, 900, 728, 372, 456, 570, 352, 384, 480, 608, 672, 864, 784, 396, 462, 350, 600, 408, 680, 442, 520, 780, 420, 546, 630, 840, 432, 594, 756, 660, 444, 504, 560, 896, 456, 836, 644, 690, 468, 624, 408, 420, 480, 520, 570, 600, 720, 840, 492, 750, 504, 640, 516, 468, 780, 528, 616, 858, 494, 540, 810, 864, 680, 714, 552, 490, 532, 630, 840, 564, 528, 576, 720, 792, 870, 588, 600, 760, 874, 612, 624, 832, 636, 560, 672, 800, 690, 648, 660, 770, 672, 756, 840, 748, 684, 696, 800, 660, 708, 630, 720, 780, 828, 732, 744, 756, 704, 768, 702, 780, 792, 700, 804, 782, 816, 736, 828, 840, 852, 770, 850, 816, 840]
print(Counter(plist)) #print Counter({840: 8, 720: 6, 660: 5, 420: 5, 360: 4, 630: 4, 780: 4, 504: 4, 672: 4, 480: 4, 240: 4, 756: 4, 528: 3, 280: 3, 540: 3, 336: 3, 396: 3, 600: 3, 120: 3, 624: 3, 168: 3, 180: 3, 560: 3, 792: 3, 252: 3, 770: 2, 520: 2, 264: 2, 270: 2, 728: 2, 288: 2, 432: 2, 546: 2, 828: 2, 552: 2, 810: 2, 300: 2, 312: 2, 570: 2, 60: 2, 330: 2, 588: 2, 84: 2, 90: 2, 612: 2, 870: 2, 616: 2, 132: 2, 390: 2, 144: 2, 456: 2, 576: 2, 924: 2, 684: 2, 690: 2, 440: 2, 700: 2, 816: 2, 450: 2, 680: 2, 462: 2, 210: 2, 468: 2, 800: 2, 408: 2, 864: 2, 760: 2, 510: 2, 768: 1, 896: 1, 260: 1, 648: 1, 12: 1, 704: 1, 276: 1, 900: 1, 640: 1, 444: 1, 858: 1, 30: 1, 750: 1, 36: 1, 646: 1, 476: 1, 798: 1, 48: 1, 306: 1, 308: 1, 564: 1, 852: 1, 320: 1, 224: 1, 324: 1, 70: 1, 72: 1, 80: 1, 56: 1, 594: 1, 782: 1, 598: 1, 608: 1, 348: 1, 736: 1, 350: 1, 880: 1, 96: 1, 400: 1, 572: 1, 874: 1, 364: 1, 112: 1, 372: 1, 732: 1, 532: 1, 378: 1, 380: 1, 490: 1, 126: 1, 384: 1, 192: 1, 150: 1, 392: 1, 108: 1, 650: 1, 140: 1, 910: 1, 24: 1, 644: 1, 918: 1, 836: 1, 154: 1, 156: 1, 160: 1, 418: 1, 832: 1, 696: 1, 176: 1, 286: 1, 182: 1, 442: 1, 702: 1, 448: 1, 544: 1, 708: 1, 374: 1, 198: 1, 516: 1, 200: 1, 714: 1, 204: 1, 208: 1, 416: 1, 216: 1, 804: 1, 748: 1, 220: 1, 494: 1, 228: 1, 744: 1, 636: 1, 234: 1, 492: 1, 850: 1, 352: 1, 40: 1, 784: 1, 340: 1}) #answer is 840
endtime = time.time()
print((endtime-startime),"seconds")
print((round(endtime-startime)),"seconds") #54 seconds
